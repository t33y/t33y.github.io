{"ast":null,"code":"const API_KEY = process.env.REACT_APP_API_KEY;\nconst getWeatherData = async (currentLocation, unit) => {\n  const URL = `https://api.openweathermap.org/data/2.5/forecast?${currentLocation}&appid=${API_KEY}&units=${unit}`;\n  if (navigator.geolocation) {\n    try {\n      navigator.geolocation.getCurrentPosition(getCoordinate);\n    } catch (err) {\n      console.log(err);\n    }\n  } else {\n    console.log(\"err\");\n  }\n  const getCoordinate = position => {\n    const location = `lat=${position.coord.lat}&lon=${position.coord.lon}`;\n    console.log(location);\n  };\n  const res = await fetch(URL);\n  const response = await res.json();\n  console.log(URL, currentLocation);\n  const data = response.list.filter(item => item.dt_txt.includes(\"00:00:00\")).map(item => ({\n    temp: item.main.temp,\n    date: item.dt,\n    desc: item.weather[0].description,\n    icon: item.weather[0].icon\n  }));\n  return data;\n};\nexport default getWeatherData;","map":{"version":3,"names":["API_KEY","process","env","REACT_APP_API_KEY","getWeatherData","currentLocation","unit","URL","navigator","geolocation","getCurrentPosition","getCoordinate","err","console","log","position","location","coord","lat","lon","res","fetch","response","json","data","list","filter","item","dt_txt","includes","map","temp","main","date","dt","desc","weather","description","icon"],"sources":["/Users/omotayoolarewaju/Desktop/tayos-weather-app2/src/services.js"],"sourcesContent":["const API_KEY = process.env.REACT_APP_API_KEY;\n\nconst getWeatherData = async (currentLocation, unit) =>{\n    const URL = `https://api.openweathermap.org/data/2.5/forecast?${currentLocation}&appid=${API_KEY}&units=${unit}`;\n\n    if(navigator.geolocation){\n        try{\n            navigator.geolocation.getCurrentPosition(getCoordinate)\n        }catch(err){console.log(err)}\n    }else{console.log(\"err\")}\n    \n    const getCoordinate = (position)=>{\n        const location = `lat=${position.coord.lat}&lon=${position.coord.lon}`\n        console.log(location)\n\n    }\n\n\n        const res = await fetch(URL);\n        const response = await res.json()\n        console.log(URL, currentLocation)\n        const data = response.list\n        .filter((item)=>item.dt_txt.includes(\"00:00:00\"))\n        .map((item)=>({\n            temp : item.main.temp,\n            date : item.dt,\n            desc : item.weather[0].description,\n            icon : item.weather[0].icon\n        }))\n        return data;\n}\n\nexport default getWeatherData;"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;AAE7C,MAAMC,cAAc,GAAG,OAAOC,eAAe,EAAEC,IAAI,KAAI;EACnD,MAAMC,GAAG,GAAI,oDAAmDF,eAAgB,UAASL,OAAQ,UAASM,IAAK,EAAC;EAEhH,IAAGE,SAAS,CAACC,WAAW,EAAC;IACrB,IAAG;MACCD,SAAS,CAACC,WAAW,CAACC,kBAAkB,CAACC,aAAa,CAAC;IAC3D,CAAC,QAAMC,GAAG,EAAC;MAACC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;IAAA;EAChC,CAAC,MAAI;IAACC,OAAO,CAACC,GAAG,CAAC,KAAK,CAAC;EAAA;EAExB,MAAMH,aAAa,GAAII,QAAQ,IAAG;IAC9B,MAAMC,QAAQ,GAAI,OAAMD,QAAQ,CAACE,KAAK,CAACC,GAAI,QAAOH,QAAQ,CAACE,KAAK,CAACE,GAAI,EAAC;IACtEN,OAAO,CAACC,GAAG,CAACE,QAAQ,CAAC;EAEzB,CAAC;EAGG,MAAMI,GAAG,GAAG,MAAMC,KAAK,CAACd,GAAG,CAAC;EAC5B,MAAMe,QAAQ,GAAG,MAAMF,GAAG,CAACG,IAAI,EAAE;EACjCV,OAAO,CAACC,GAAG,CAACP,GAAG,EAAEF,eAAe,CAAC;EACjC,MAAMmB,IAAI,GAAGF,QAAQ,CAACG,IAAI,CACzBC,MAAM,CAAEC,IAAI,IAAGA,IAAI,CAACC,MAAM,CAACC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAChDC,GAAG,CAAEH,IAAI,KAAI;IACVI,IAAI,EAAGJ,IAAI,CAACK,IAAI,CAACD,IAAI;IACrBE,IAAI,EAAGN,IAAI,CAACO,EAAE;IACdC,IAAI,EAAGR,IAAI,CAACS,OAAO,CAAC,CAAC,CAAC,CAACC,WAAW;IAClCC,IAAI,EAAGX,IAAI,CAACS,OAAO,CAAC,CAAC,CAAC,CAACE;EAC3B,CAAC,CAAC,CAAC;EACH,OAAOd,IAAI;AACnB,CAAC;AAED,eAAepB,cAAc"},"metadata":{},"sourceType":"module"}