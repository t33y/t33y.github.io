{"ast":null,"code":"var _jsxFileName = \"/Users/omotayoolarewaju/Desktop/hangman/src/HangmanWord.jsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HangmanWord = _ref => {\n  let {\n    word,\n    guessedLetters,\n    setGuessedLetters,\n    isLoser,\n    isWinner\n  } = _ref;\n  // const word = words[Math.floor(Math.random()* 11)]\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textTransform: \"uppercase\",\n      fontWeight: \"bold\",\n      fontSize: \"40px\",\n      display: \"flex\",\n      flexDirection: \"row\",\n      gap: \"7px\"\n    },\n    children: [console.log(guessedLetters, \"running11\"), word === null || word === void 0 ? void 0 : word.split(\"\").map((letter, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          borderBottom: \"10px black solid\",\n          width: \"50px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            visibility: guessedLetters.includes(letter) ? \"visible\" : isLoser || isWinner ? \"visible\" : \"hidden\"\n          },\n          children: letter\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 18\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 22\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 9\n  }, this);\n};\n_c = HangmanWord;\nexport default HangmanWord;\nvar _c;\n$RefreshReg$(_c, \"HangmanWord\");","map":{"version":3,"names":["React","HangmanWord","word","guessedLetters","setGuessedLetters","isLoser","isWinner","textTransform","fontWeight","fontSize","display","flexDirection","gap","console","log","split","map","letter","index","borderBottom","width","visibility","includes"],"sources":["/Users/omotayoolarewaju/Desktop/hangman/src/HangmanWord.jsx"],"sourcesContent":["import React from 'react'\n\nconst HangmanWord = ({word, guessedLetters, setGuessedLetters, isLoser, isWinner}) =>{\n    // const word = words[Math.floor(Math.random()* 11)]\n    return(\n        <div style={{textTransform:\"uppercase\", fontWeight:\"bold\", fontSize:\"40px\", display:\"flex\", flexDirection:\"row\", gap:\"7px\"  }}>\n      {console.log(guessedLetters, \"running11\")}\n            {word?.split(\"\").map((letter,index)=>{\n             return  <div key={index} style={{borderBottom:\"10px black solid\", width:\"50px\"}}>\n                 <span style={\n                        {visibility: guessedLetters.includes(letter)? \"visible\"\n                        :isLoser || isWinner ? \"visible\":\"hidden\"\n                        }}>\n                        {letter}</span>\n             </div>\n               })}\n        </div>\n    )\n} \n\nexport default HangmanWord;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAA;AAEzB,MAAMC,WAAW,GAAG,QAAiE;EAAA,IAAhE;IAACC,IAAI;IAAEC,cAAc;IAAEC,iBAAiB;IAAEC,OAAO;IAAEC;EAAQ,CAAC;EAC7E;EACA,oBACI;IAAK,KAAK,EAAE;MAACC,aAAa,EAAC,WAAW;MAAEC,UAAU,EAAC,MAAM;MAAEC,QAAQ,EAAC,MAAM;MAAEC,OAAO,EAAC,MAAM;MAAEC,aAAa,EAAC,KAAK;MAAEC,GAAG,EAAC;IAAO,CAAE;IAAA,WAC/HC,OAAO,CAACC,GAAG,CAACX,cAAc,EAAE,WAAW,CAAC,EAClCD,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEa,KAAK,CAAC,EAAE,CAAC,CAACC,GAAG,CAAC,CAACC,MAAM,EAACC,KAAK,KAAG;MACpC,oBAAQ;QAAiB,KAAK,EAAE;UAACC,YAAY,EAAC,kBAAkB;UAAEC,KAAK,EAAC;QAAM,CAAE;QAAA,uBAC5E;UAAM,KAAK,EACJ;YAACC,UAAU,EAAElB,cAAc,CAACmB,QAAQ,CAACL,MAAM,CAAC,GAAE,SAAS,GACtDZ,OAAO,IAAIC,QAAQ,GAAG,SAAS,GAAC;UACjC,CAAE;UAAA,UACDW;QAAM;UAAA;UAAA;UAAA;QAAA;MAAQ,GALRC,KAAK;QAAA;QAAA;QAAA;MAAA,QAMjB;IACJ,CAAC,CAAC;EAAA;IAAA;IAAA;IAAA;EAAA,QACH;AAEd,CAAC;AAAA,KAhBKjB,WAAW;AAkBjB,eAAeA,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}