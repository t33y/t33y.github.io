{"ast":null,"code":"var _jsxFileName = \"/Users/omotayoolarewaju/Desktop/hangman/src/HangmanWord.jsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HangmanWord = _ref => {\n  let {\n    words,\n    guessedLetters,\n    setGuessedLetters\n  } = _ref;\n  const word = words[Math.floor(Math.random() * 11)];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textTransform: \"uppercase\",\n      fontWeight: \"bold\",\n      fontSize: \"40px\",\n      display: \"flex\",\n      flexDirection: \"row\",\n      gap: \"7px\"\n    },\n    children: word.split(\"\").map(letter => {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          textDecoration: \"underline\",\n          visibility: guessedLetters.includes(letter) ? \"hidden\" : \"visible\"\n        },\n        children: letter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 22\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 9\n  }, this);\n};\n_c = HangmanWord;\nexport default HangmanWord;\nvar _c;\n$RefreshReg$(_c, \"HangmanWord\");","map":{"version":3,"names":["React","HangmanWord","words","guessedLetters","setGuessedLetters","word","Math","floor","random","textTransform","fontWeight","fontSize","display","flexDirection","gap","split","map","letter","textDecoration","visibility","includes"],"sources":["/Users/omotayoolarewaju/Desktop/hangman/src/HangmanWord.jsx"],"sourcesContent":["import React from 'react'\n\nconst HangmanWord = ({words, guessedLetters, setGuessedLetters}) =>{\n    const word = words[Math.floor(Math.random()* 11)]\n    return(\n        <div style={{textTransform:\"uppercase\", fontWeight:\"bold\", fontSize:\"40px\", display:\"flex\", flexDirection:\"row\", gap:\"7px\"  }}>\n            {word.split(\"\").map((letter)=>{\n             return  <span style={\n                     {textDecoration:\"underline\",\n                     visibility: guessedLetters.includes(letter)? \"hidden\":\"visible\"\n                     }}>\n                     {letter}</span>\n            })}\n        </div>\n    )\n} \n\nexport default HangmanWord;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAA;AAEzB,MAAMC,WAAW,GAAG,QAA+C;EAAA,IAA9C;IAACC,KAAK;IAAEC,cAAc;IAAEC;EAAiB,CAAC;EAC3D,MAAMC,IAAI,GAAGH,KAAK,CAACI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAE,EAAE,CAAC,CAAC;EACjD,oBACI;IAAK,KAAK,EAAE;MAACC,aAAa,EAAC,WAAW;MAAEC,UAAU,EAAC,MAAM;MAAEC,QAAQ,EAAC,MAAM;MAAEC,OAAO,EAAC,MAAM;MAAEC,aAAa,EAAC,KAAK;MAAEC,GAAG,EAAC;IAAO,CAAE;IAAA,UACzHT,IAAI,CAACU,KAAK,CAAC,EAAE,CAAC,CAACC,GAAG,CAAEC,MAAM,IAAG;MAC7B,oBAAQ;QAAM,KAAK,EACX;UAACC,cAAc,EAAC,WAAW;UAC3BC,UAAU,EAAEhB,cAAc,CAACiB,QAAQ,CAACH,MAAM,CAAC,GAAE,QAAQ,GAAC;QACtD,CAAE;QAAA,UACDA;MAAM;QAAA;QAAA;QAAA;MAAA,QAAQ;IACxB,CAAC;EAAC;IAAA;IAAA;IAAA;EAAA,QACA;AAEd,CAAC;AAAA,KAbKhB,WAAW;AAejB,eAAeA,WAAW;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}