{"ast":null,"code":"import _classCallCheck from \"/Users/omotayoolarewaju/Desktop/tayos-notes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/omotayoolarewaju/Desktop/tayos-notes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/omotayoolarewaju/Desktop/tayos-notes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/omotayoolarewaju/Desktop/tayos-notes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/omotayoolarewaju/Desktop/tayos-notes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport { Info } from './info.js';\nimport * as types from './types.js';\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nvar checks = Object.keys(types);\nexport var DefinedInfo = /*#__PURE__*/function (_Info) {\n  _inherits(DefinedInfo, _Info);\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  function DefinedInfo(property, attribute, mask, space) {\n    var _this;\n    _classCallCheck(this, DefinedInfo);\n    var index = -1;\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DefinedInfo).call(this, property, attribute));\n    mark(_assertThisInitialized(_assertThisInitialized(_this)), 'space', space);\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        var check = checks[index];\n        mark(_assertThisInitialized(_assertThisInitialized(_this)), checks[index], (mask & types[check]) === types[check]);\n      }\n    }\n    return _this;\n  }\n  return DefinedInfo;\n}(Info);\nDefinedInfo.prototype.defined = true;\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}