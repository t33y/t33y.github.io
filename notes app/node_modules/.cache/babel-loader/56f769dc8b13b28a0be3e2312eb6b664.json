{"ast":null,"code":"/**\n * @typedef {import('mdast').Table} Table\n * @typedef {import('hast').Element} Element\n * @typedef {import('../index.js').H} H\n * @typedef {import('../index.js').Content} Content\n */\n\nimport { pointStart, pointEnd } from 'unist-util-position';\nimport { wrap } from '../wrap.js';\nimport { all } from '../traverse.js';\n\n/**\n * @param {H} h\n * @param {Table} node\n */\nexport function table(h, node) {\n  var rows = node.children;\n  var index = -1;\n  var align = node.align || [];\n  /** @type {Array<Element>} */\n  var result = [];\n  while (++index < rows.length) {\n    var row = rows[index].children;\n    var name = index === 0 ? 'th' : 'td';\n    /** @type {Array<Content>} */\n    var out = [];\n    var cellIndex = -1;\n    var length = node.align ? align.length : row.length;\n    while (++cellIndex < length) {\n      var cell = row[cellIndex];\n      out.push(h(cell, name, {\n        align: align[cellIndex]\n      }, cell ? all(h, cell) : []));\n    }\n    result[index] = h(rows[index], 'tr', wrap(out, true));\n  }\n  return h(node, 'table', wrap([h(result[0].position, 'thead', wrap([result[0]], true))].concat(result[1] ? h({\n    start: pointStart(result[1]),\n    end: pointEnd(result[result.length - 1])\n  }, 'tbody', wrap(result.slice(1), true)) : []), true));\n}","map":null,"metadata":{},"sourceType":"module"}