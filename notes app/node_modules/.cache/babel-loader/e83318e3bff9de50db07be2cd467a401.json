{"ast":null,"code":"/**\n * @typedef {import('mdast').Code} Code\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('../index.js').H} H\n\n */\n\nimport { u } from 'unist-builder';\n\n/**\n * @param {H} h\n * @param {Code} node\n */\nexport function code(h, node) {\n  var value = node.value ? node.value + '\\n' : '';\n  // To do: next major, use `node.lang` w/o regex, the splittingâ€™s been going\n  // on for years in remark now.\n  var lang = node.lang && node.lang.match(/^[^ \\t]+(?=[ \\t]|$)/);\n  /** @type {Properties} */\n  var props = {};\n  if (lang) {\n    props.className = ['language-' + lang];\n  }\n  var code = h(node, 'code', props, [u('text', value)]);\n  if (node.meta) {\n    code.data = {\n      meta: node.meta\n    };\n  }\n  return h(node.position, 'pre', [code]);\n}","map":null,"metadata":{},"sourceType":"module"}